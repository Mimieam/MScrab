Millestone:
 ☐ Equation validation
   ✔ simple implementation @done (13-03-20 19:28)
   ✔ check all side of tiles @done (13-04-01 04:22)
   ☐ checking all side of each tile for possible side equations
      ☐  deep equality check 
   ✔ add tile weight before computing @done (13-04-04 06:22)
      ☐ bug - weight is added on validation even when equation is not correct - need to keep track of old number
   ✔ check tile with disable value @done (13-06-29 20:17)
      ✔ check until we hit an '= sign @done (13-06-29 20:17)
   ✔ check if the new equation is connected to an old one. @done (13-06-29 20:17)
   ✔ reset css of chips sent back to rack  see - sendInvalidBackToRack() @done (13-06-06 18:19)
   ☐ improve scoring ( add the the number of used chip to the scoring - maybe 2pt per chips used in equation)


 ✔ Parser @done (13-04-08 18:50)
    ✔ rewrite  it to  handle multiple equations such at      "2+1 = 3 = 5-2" @done (13-04-08 18:50)
     

 ☐ Map rendering
   ✔ basic map with pattern @done (13-03-20 19:28)
   ☐ infinite map    //currently stopped
      ✔ pseudoInfinite @done (13-03-25 07:47)
      ☐ optimized intinite
   ✔ tile coloring @done (13-03-21 08:40)
     ☐ make it prettier
   ✔ Special tiles with weight @done (13-03-25 07:46)
   ✔ add homeTile @done (13-06-29 20:19)
     ☐ make it pretty 

 ☐ Network data formating
   ☐ use json format

 ☐ Scoring
   ☐ computation
      ☐ while computing the score of an equation with multiple equalities - multiply by equalities - 1
      ☐ 
      ☐ 
   ☐ animation
      ✔ visual feedback on validation @done (13-04-01 04:23)
      ☐ multiple visual feedback need to be fired for each step of evaluation 
   ☐ fix coloring

 ☐ Tunning
   ☐ better color for background and border (need designer help)

 ☐ Rack
     ✔ refill rack instead of reseting it @done (13-06-30 21:28)
      
Bug:
 ☐ Validation equation need more testing
 ✔ chip is offset sometime on drop @done (13-04-04 06:01)
 ☐ problem on dblclick not fired - sometime it's not removing a chip 

Tuneup:
 ☐ remove all css from js and use OOCSS
Tools:
 ☐ Texture Packer = > create a atlas(or sprite sheet) from lots of images

validation rules:
an equation is true if 
   ✔ it is make use of a previously used and disabled tile/chip. @done (13-06-06 17:23)
   ✔ if the equation contain at least one  '=' sign @done (13-06-06 17:23)
   ✔ if the left & right hand side of the equation are equal.... @done (13-06-06 17:23)

Implementation details
 ☐ 


 New twist:

on drop of a chip on a tile -> mark that tile as active ( dropping logic is not cared for here yet) if the chip is moved/removed then desactivate the tile
then when ready to validate - collect all the active tiles into a Set of pairs {x,y} where x and y are the row and column of each active tile
So the validation will use this Unsorted Set as input. 


  ☐ recursive check
      check the first tile on the left and go up until no more tiles are met or an equal sign is encounter
        if no more tile then stop and save that current equation
          else if an equal sign is found, go all the way till another equal is meet or no more tiles anymore

      4 
=2+2=1+3=1+1+2=
      2+
   1+5=5+2-1=6
      6=
       8


     don't use self aware tiles but simply grid.
     track position of first and last tile drop 

 ☐ get primary new equation  ( the one the player entered)
     use tile set, {[x,y],[x,y],[x,y],....,[x,y]} add/remove each time a chip is put/remove on/from the board.

     if direction is horizontal ( if all y are equal)
       then sort set by x
     else if vertical
        then sort set by y
     else
         invalid equation not all tile were on the same direction

     save min and max of set as  first and last element of the equation
     return min and max of [x,y]'s called them Start and End ( respecivetly start of equation and u know...) and direction

 ☐ get secondary equation ( derived from addition to new tiles to the old ones)
     go from the Start, and make sets from adjacent tiles to the primary equation. 
       if primary direction is horizontal 
         then make verical set
       else 
              make horizontal set

     secondary sets will collect enough to determine the correctness of the equation


